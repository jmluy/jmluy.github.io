<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring mvc on John Michael Luy</title>
    <link>https://www.jmluy.dev/tags/spring-mvc/</link>
    <description>Recent content in spring mvc on John Michael Luy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Sep 2010 09:16:22 +0800</lastBuildDate>
    
	<atom:link href="https://www.jmluy.dev/tags/spring-mvc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using a custom validator with JSR 303 annotations</title>
      <link>https://www.jmluy.dev/posts/custom-validator-jsr330-annotations/</link>
      <pubDate>Tue, 28 Sep 2010 09:16:22 +0800</pubDate>
      
      <guid>https://www.jmluy.dev/posts/custom-validator-jsr330-annotations/</guid>
      <description>I was using JSR 303 annotations for validating my models but i had a scenario where i need to extend the validation by adding my own validator. So what i did was create a validator implementing spring&amp;rsquo;s validator interface then extending LocalValidatorFactoryBean. The thing to note is not to instantiate the validator yourself but just add the autowire annotation and let the container inject the correct validator for you.
The model</description>
    </item>
    
    <item>
      <title>Hibernate, Oracle and the empty string</title>
      <link>https://www.jmluy.dev/posts/hibernate-oracle-empty-string/</link>
      <pubDate>Thu, 12 Aug 2010 11:18:05 +0800</pubDate>
      
      <guid>https://www.jmluy.dev/posts/hibernate-oracle-empty-string/</guid>
      <description>We had a model that contained an annotation specifying that it shouldn&amp;rsquo;t be null. It works with Postgres when we were inserting empty strings. But with Oracle, it&amp;rsquo;s throwing an exception. Apparently, Oracle converts empty strings to null. Just one of those quirks. As a workaround, we just allowed null entries.</description>
    </item>
    
    <item>
      <title>Using Spring-WS for creating a client</title>
      <link>https://www.jmluy.dev/posts/spring-ws-client/</link>
      <pubDate>Tue, 01 Jun 2010 08:18:23 +0800</pubDate>
      
      <guid>https://www.jmluy.dev/posts/spring-ws-client/</guid>
      <description>Sample config for WebServiceTemplate
&amp;lt;bean id=&amp;#34;saajMessageFactory&amp;#34; class=&amp;#34;org.springframework.ws.soap.saaj.SaajSoapMessageFactory&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;soapVersion&amp;#34;&amp;gt; &amp;lt;util:constant static-field=&amp;#34;org.springframework.ws.soap.SoapVersion.SOAP_12&amp;#34;/&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;marshaller&amp;#34; class=&amp;#34;org.springframework.oxm.jaxb.Jaxb2Marshaller&amp;#34; p:contextPath=&amp;#34;com.whatever:com.another.package&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;wsTemplate&amp;#34; class=&amp;#34;org.springframework.ws.client.core.WebServiceTemplate&amp;#34; p:messageFactory-ref=&amp;#34;saajMessageFactory&amp;#34; p:defaultUri=&amp;#34;http://whatever&amp;#34; p:marshaller-ref=&amp;#34;marshaller&amp;#34; p:unmarshaller-ref=&amp;#34;marshaller&amp;#34;/&amp;gt; To specify more than 1 path for the marshaller, just use colons to separate the packages.</description>
    </item>
    
    <item>
      <title>Accessing Spring beans from your jsp</title>
      <link>https://www.jmluy.dev/posts/accessing-spring-beans-from-jsp/</link>
      <pubDate>Thu, 20 May 2010 11:41:11 +0800</pubDate>
      
      <guid>https://www.jmluy.dev/posts/accessing-spring-beans-from-jsp/</guid>
      <description>Spring MVC can expose your beans to JSTL. To expose all your beans, you can configure your view resolver like the following.
&amp;lt;bean id=&amp;#34;viewResolver&amp;#34; class=&amp;#34;org.springframework.web.servlet.view.InternalResourceViewResolver&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;viewClass&amp;#34; value=&amp;#34;org.springframework.web.servlet.view.JstlView&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;exposeContextBeansAsAttributes&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;prefix&amp;#34; value=&amp;#34;/WEB-INF/view&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;suffix&amp;#34; value=&amp;#34;.jsp&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; Alternatively, to only expose selected beans you can use exposedContextBeanNames to only expose specific beans. You can use either of those 2 properties.</description>
    </item>
    
  </channel>
</rss>